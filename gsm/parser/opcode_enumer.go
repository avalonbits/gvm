/*
 * Copyright (C) 2019  Igor Cananea <icc@avalonbits.com>
 * Author: Igor Cananea <icc@avalonbits.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

// Code generated by "enumer -type=OpCode"; DO NOT EDIT.

//
package parser

import (
	"fmt"
)

const _OpCodeName = "NopHaltLoad_riLoad_ixLoad_pcLoad_ixrLoad_piLoad_ipLdp_piLdp_ipStor_riStor_ixStor_pcStor_piStor_ipStp_piStp_ipAdd_rrAdd_riSub_rrSub_riJmpJneJeqJgtJgeJltJleCall_iCall_rRetAnd_rrAnd_riOrr_rrOrr_riXor_rrXor_riLsl_rrLsl_riLsr_rrLsr_riAsr_rrAsr_riMul_rrMul_riDiv_rrDiv_riMull_rrWfi"

var _OpCodeIndex = [...]uint16{0, 3, 7, 14, 21, 28, 36, 43, 50, 56, 62, 69, 76, 83, 90, 97, 103, 109, 115, 121, 127, 133, 136, 139, 142, 145, 148, 151, 154, 160, 166, 169, 175, 181, 187, 193, 199, 205, 211, 217, 223, 229, 235, 241, 247, 253, 259, 265, 272, 275}

func (i OpCode) String() string {
	if i >= OpCode(len(_OpCodeIndex)-1) {
		return fmt.Sprintf("OpCode(%d)", i)
	}
	return _OpCodeName[_OpCodeIndex[i]:_OpCodeIndex[i+1]]
}

var _OpCodeValues = []OpCode{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48}

var _OpCodeNameToValueMap = map[string]OpCode{
	_OpCodeName[0:3]:     0,
	_OpCodeName[3:7]:     1,
	_OpCodeName[7:14]:    2,
	_OpCodeName[14:21]:   3,
	_OpCodeName[21:28]:   4,
	_OpCodeName[28:36]:   5,
	_OpCodeName[36:43]:   6,
	_OpCodeName[43:50]:   7,
	_OpCodeName[50:56]:   8,
	_OpCodeName[56:62]:   9,
	_OpCodeName[62:69]:   10,
	_OpCodeName[69:76]:   11,
	_OpCodeName[76:83]:   12,
	_OpCodeName[83:90]:   13,
	_OpCodeName[90:97]:   14,
	_OpCodeName[97:103]:  15,
	_OpCodeName[103:109]: 16,
	_OpCodeName[109:115]: 17,
	_OpCodeName[115:121]: 18,
	_OpCodeName[121:127]: 19,
	_OpCodeName[127:133]: 20,
	_OpCodeName[133:136]: 21,
	_OpCodeName[136:139]: 22,
	_OpCodeName[139:142]: 23,
	_OpCodeName[142:145]: 24,
	_OpCodeName[145:148]: 25,
	_OpCodeName[148:151]: 26,
	_OpCodeName[151:154]: 27,
	_OpCodeName[154:160]: 28,
	_OpCodeName[160:166]: 29,
	_OpCodeName[166:169]: 30,
	_OpCodeName[169:175]: 31,
	_OpCodeName[175:181]: 32,
	_OpCodeName[181:187]: 33,
	_OpCodeName[187:193]: 34,
	_OpCodeName[193:199]: 35,
	_OpCodeName[199:205]: 36,
	_OpCodeName[205:211]: 37,
	_OpCodeName[211:217]: 38,
	_OpCodeName[217:223]: 39,
	_OpCodeName[223:229]: 40,
	_OpCodeName[229:235]: 41,
	_OpCodeName[235:241]: 42,
	_OpCodeName[241:247]: 43,
	_OpCodeName[247:253]: 44,
	_OpCodeName[253:259]: 45,
	_OpCodeName[259:265]: 46,
	_OpCodeName[265:272]: 47,
	_OpCodeName[272:275]: 48,
}

// OpCodeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OpCodeString(s string) (OpCode, error) {
	if val, ok := _OpCodeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OpCode values", s)
}

// OpCodeValues returns all values of the enum
func OpCodeValues() []OpCode {
	return _OpCodeValues
}

// IsAOpCode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OpCode) IsAOpCode() bool {
	for _, v := range _OpCodeValues {
		if i == v {
			return true
		}
	}
	return false
}
