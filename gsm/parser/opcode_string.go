/*
 * Copyright (C) 2019  Igor Cananea <icc@avalonbits.com>
 * Author: Igor Cananea <icc@avalonbits.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

// Code generated by "stringer -type=OpCode"; DO NOT EDIT.

package parser

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Nop-0]
	_ = x[Halt-1]
	_ = x[Load_ri-2]
	_ = x[Load_ix-3]
	_ = x[Load_pc-4]
	_ = x[Load_ixr-5]
	_ = x[Load_pi-6]
	_ = x[Load_ip-7]
	_ = x[Ldp_pi-8]
	_ = x[Ldp_ip-9]
	_ = x[Stor_ri-10]
	_ = x[Stor_ix-11]
	_ = x[Stor_pc-12]
	_ = x[Stor_pi-13]
	_ = x[Stor_ip-14]
	_ = x[Stp_pi-15]
	_ = x[Stp_ip-16]
	_ = x[Add_rr-17]
	_ = x[Add_ri-18]
	_ = x[Sub_rr-19]
	_ = x[Sub_ri-20]
	_ = x[Jmp-21]
	_ = x[Jne-22]
	_ = x[Jeq-23]
	_ = x[Jgt-24]
	_ = x[Jge-25]
	_ = x[Jlt-26]
	_ = x[Jle-27]
	_ = x[Call_i-28]
	_ = x[Call_r-29]
	_ = x[Ret-30]
	_ = x[And_rr-31]
	_ = x[And_ri-32]
	_ = x[Orr_rr-33]
	_ = x[Orr_ri-34]
	_ = x[Xor_rr-35]
	_ = x[Xor_ri-36]
	_ = x[Lsl_rr-37]
	_ = x[Lsl_ri-38]
	_ = x[Lsr_rr-39]
	_ = x[Lsr_ri-40]
	_ = x[Asr_rr-41]
	_ = x[Asr_ri-42]
	_ = x[Mul_rr-43]
	_ = x[Mul_ri-44]
	_ = x[Div_rr-45]
	_ = x[Div_ri-46]
	_ = x[Mull_rr-47]
	_ = x[Wfi-48]
}

const _OpCode_name = "NopHaltLoad_riLoad_ixLoad_pcLoad_ixrLoad_piLoad_ipLdp_piLdp_ipStor_riStor_ixStor_pcStor_piStor_ipStp_piStp_ipAdd_rrAdd_riSub_rrSub_riJmpJneJeqJgtJgeJltJleCall_iCall_rRetAnd_rrAnd_riOrr_rrOrr_riXor_rrXor_riLsl_rrLsl_riLsr_rrLsr_riAsr_rrAsr_riMul_rrMul_riDiv_rrDiv_riMull_rrWfi"

var _OpCode_index = [...]uint16{0, 3, 7, 14, 21, 28, 36, 43, 50, 56, 62, 69, 76, 83, 90, 97, 103, 109, 115, 121, 127, 133, 136, 139, 142, 145, 148, 151, 154, 160, 166, 169, 175, 181, 187, 193, 199, 205, 211, 217, 223, 229, 235, 241, 247, 253, 259, 265, 272, 275}

func (i OpCode) String() string {
	if i >= OpCode(len(_OpCode_index)-1) {
		return "OpCode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _OpCode_name[_OpCode_index[i]:_OpCode_index[i+1]]
}
